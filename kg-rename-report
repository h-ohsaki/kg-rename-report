#!/usr/bin/env python3
#
# Copy report files download from LUNA (Blackboard variant) in normalized names.
# Copyright (c) 2020, Hiroyuki Ohsaki.
# All rights reserved.
#

# version 1.3

import os
import re
import shutil
import sys
import tkinter
import tkinter.filedialog
import tkinter.messagebox
import tkinter.simpledialog

from perlcompat import die, warn, getopts
#import tbdump

def usage():
    die(f"""\
usage: {sys.argv[0]} [-v] [file...]
  -v    verbose mode
""")

def pick_prefix():
    """Select the prefix added for normalized filenames."""
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()
    return tkinter.simpledialog.askstring(
        title='',
        prompt="Enter the prefix for normalized filenames (default: report)")

def pick_files():
    """Select multipe files using filedialog in Tkinter."""
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()
    return tkinter.filedialog.askopenfilenames(
        title="Select report files to normalize")

def attrib_file(path):
    """Return the student code and the full pathname of the attribute file
    corresponding to the report file named PATH as a tuple."""
    dir_ = os.path.dirname(path)
    base = os.path.basename(path)
    m = re.match(r'(\d{8})-(.+)\.(.+?)$', base)
    code, file = None, None
    if m:
        code = m.group(1)
        file = os.path.join(dir_, f'{code}.txt')
        if not os.path.exists(file):
            file = None
    return code, file

def lookup_attribs(file):
    """Extract student attributes (full name, login ID, and notes) from the
    attribute file (named as `CODE.txt') FILE.  Return the full name, the
    login ID, and the note as a dictionary."""
    attrs = {'note': ''}
    try:
        with open(file, encoding='sjis', errors='ignore') as f:
            for n, line in enumerate(f):
                line = line.rstrip()
                # NOTE: this code depends the format of TXT files in assigmentDL.zip
                m = re.match(r'名前:(.+?) (.+) (.+?)$', line)
                if m:
                    attrs['name'], _, attrs['login'] = m.groups()
                    # replace zenkaku space with hanakaku
                    attrs['name'] = attrs['name'].replace('　', ' ')
                if n >= 8:
                    attrs['note'] += f'{line}\n'
    except FileNotFoundError:
        pass
    except TypeError:
        pass
    return attrs

def normalize_path(path, attrs, prefix, short_name):
    """Return a normalized pathname for a report file PATH.  A normalized path
    is a full pathname whose basename consists of student code, login ID, and
    full name followed by the extension of the original pathname.  Return None
    if normalization fails."""
    if not prefix:
        prefix = 'report'
    dir_ = os.path.dirname(path)
    base = os.path.basename(path)
    ext = re.sub(r'^.+\.', '', base)
    try:
        if short_name:
            return os.path.join(
                dir_, f"{prefix}-{attrs['code']}-{attrs['name']}.{ext}")
        else:
            return os.path.join(
                dir_,
                f"{prefix}-{attrs['code']}-{attrs['login']}-{attrs['name']}.{ext}"
            )
    except KeyError:
        return None

def main():
    opt = getopts('vs') or usage()
    verbose = opt.v
    short_name = opt.s
    if 'short' in sys.argv[0]:
        short_name = True

    files = sys.argv[1:]
    prefix = pick_prefix()
    if not files:
        files = pick_files()
    for path in files:
        code, attr_file = attrib_file(path)
        attrs = lookup_attribs(attr_file)
        attrs['code'] = code
        newpath = normalize_path(path, attrs, prefix, short_name)
        if newpath:
            shutil.copyfile(path, newpath)
        if attrs['note'] and not '受講者のコメントはありません' in attrs['note']:
            notepath = re.sub(r'\.(.+?)$', r'-note.txt', newpath)
            shutil.copyfile(attr_file, notepath)

if __name__ == "__main__":
    main()
